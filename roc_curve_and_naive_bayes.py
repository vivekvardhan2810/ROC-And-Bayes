# -*- coding: utf-8 -*-
"""ROC Curve and Naive Bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wxPN8wUtZPntTknM97web7Ep2xUnqQWH
"""

import matplotlib.pyplot as plt

sensitivity = [0.8, 0.33, 0.75, 1.0]
specificity = [1.0, 1.0, 0.5, 0.0]

# Calculate the False Positive Rate (1 - Specificity)
false_positive_rate = [1 - spec for spec in specificity]

# Plot the ROC curve
plt.plot(false_positive_rate, sensitivity, marker='o')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate (1 - Specificity)')
plt.ylabel('True Positive Rate (Sensitivity)')
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Sample data
data = {
    'SrNo.': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'user_ID': [101, 102, 103, 104, 105, 106, 107, 108, 109, 110],
    'Gender': ['Male', 'Male', 'Female', 'Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female'],
    'Age': [25, 30, 22, 35, 28, 24, 31, 29, 33, 26],
    'Estimate Salary': [50000, 70000, 30000, 80000, 60000, 40000, 90000, 75000, 85000, 45000],
    'Purchase': [0, 1, 0, 1, 1, 0, 1, 0, 1, 0]  # 0: Not Purchased, 1: Purchased
}

df = pd.DataFrame(data)

# Separate features (X) and target variable (y)
X = df[['Gender', 'Age', 'Estimate Salary']]
y = df['Purchase']

# Convert categorical variables to numerical using one-hot encoding
X = pd.get_dummies(X, columns=['Gender'], drop_first=True)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Na√Øve Bayes Classifier
nb_classifier = GaussianNB()
nb_classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = nb_classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'Confusion Matrix:\n{conf_matrix}')
print(f'Classification Report:\n{classification_rep}')